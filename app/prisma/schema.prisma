// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String          @id @default(cuid())
  email        String          @unique
  name         String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  journal      JournalEntry[]
  watchlist    WatchlistItem[]
  lists        FilmList[]
}

model Film {
  id           Int             @id
  title        String
  overview     String?         @db.Text
  posterPath   String?
  releaseDate  String?
  voteAverage  Float?
  journalEntries JournalEntry[]
  watchlistItems WatchlistItem[]
  lists          FilmOnList[]
}

model JournalEntry {
  id         Int      @id @default(autoincrement())
  rating     Float
  review     String?  @db.Text
  loggedDate DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  filmId     Int
  userId     String
  film       Film     @relation(fields: [filmId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@unique([userId, filmId, loggedDate])
  @@index([userId])
  @@index([filmId])
}

model WatchlistItem {
  filmId    Int
  userId    String
  addedAt   DateTime @default(now())
  film      Film     @relation(fields: [filmId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([userId, filmId])
  @@index([userId])
  @@index([filmId])
}

model FilmList {
  id          String       @id @default(cuid())
  name        String
  description String?      @db.Text
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userId      String
  user        User         @relation(fields: [userId], references: [id])
  films       FilmOnList[]

  @@index([userId])
}

model FilmOnList {
  listId   String
  filmId   Int
  addedAt  DateTime @default(now())
  list     FilmList @relation(fields: [listId], references: [id])
  film     Film     @relation(fields: [filmId], references: [id])

  @@id([listId, filmId])
  @@index([listId])
  @@index([filmId])
}
