// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id              String         @id @default(cuid())
  name            String?
  username        String?        @unique
  email           String         @unique
  password        String?
  imageUrl        String?
  bio             String?        @db.Text
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")
  journalEntries  JournalEntry[]
  filmLists       FilmList[]
  likedFilms      LikedFilm[]
  followers       Follows[]      @relation("Following")
  following       Follows[]      @relation("Follower")
  favoriteFilms   FavoriteFilm[]
  likedLists      LikedList[]
  likedReviews    ReviewLike[]
  comments        Comment[]

  @@map("users")
}

model Follows {
  follower    User     @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   User     @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String
  createdAt   DateTime @default(now())

  @@id([followerId, followingId])
}

model Film {
  id            Int             @id
  title         String
  overview      String?         @db.Text
  poster_path   String?
  release_date  DateTime?
  vote_average  Float?
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")
  journalEntry  JournalEntry[]
  watchlist     WatchlistItem[]
  lists         FilmsOnList[]
  likedBy       LikedFilm[]
  favoritedBy   FavoriteFilm[]

  @@map("films")
}

model JournalEntry {
  id          String       @id @default(cuid())
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  film        Film         @relation(fields: [filmId], references: [id], onDelete: Cascade)
  filmId      Int
  rating      Float
  review      String?      @db.Text
  logged_date DateTime
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  reviewLikes ReviewLike[]
  comments    Comment[]

  @@map("journal_entries")
}

model WatchlistItem {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  film      Film     @relation(fields: [filmId], references: [id], onDelete: Cascade)
  filmId    Int
  addedAt   DateTime @default(now()) @map("added_at")

  @@id([userId, filmId])
  @@map("watchlist_items")
}

model FilmList {
  id          String        @id @default(cuid())
  name        String
  description String?       @db.Text
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  films       FilmsOnList[]
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  likedBy     LikedList[]

  @@map("film_lists")
}

model FilmsOnList {
  list      FilmList @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId    String
  film      Film     @relation(fields: [filmId], references: [id], onDelete: Cascade)
  filmId    Int
  addedAt   DateTime @default(now()) @map("added_at")

  @@id([listId, filmId])
  @@map("films_on_list")
}

model LikedFilm {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  film      Film     @relation(fields: [filmId], references: [id], onDelete: Cascade)
  filmId    Int
  createdAt DateTime @default(now()) @map("created_at")

  @@id([userId, filmId])
  @@map("liked_films")
}

model LikedList {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  list      FilmList @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId    String
  createdAt DateTime @default(now()) @map("created_at")

  @@id([userId, listId])
  @@map("liked_lists")
}

model FavoriteFilm {
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  film   Film @relation(fields: [filmId], references: [id], onDelete: Cascade)
  filmId Int

  @@id([userId, filmId])
  @@map("favorite_films")
}

model ReviewLike {
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  journalEntry   JournalEntry @relation(fields: [journalEntryId], references: [id], onDelete: Cascade)
  journalEntryId String
  createdAt      DateTime     @default(now()) @map("created_at")

  @@id([userId, journalEntryId])
  @@map("review_likes")
}

model Comment {
  id             String       @id @default(cuid())
  content        String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  journalEntry   JournalEntry @relation(fields: [journalEntryId], references: [id], onDelete: Cascade)
  journalEntryId String
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")

  @@map("comments")
}
