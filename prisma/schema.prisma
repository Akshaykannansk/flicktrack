// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

model User {
  id              String          @id @default(cuid())
  name            String?
  username        String?         @unique
  email           String          @unique
  password        String
  bio             String?         @db.Text
  imageUrl        String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  journalEntries  JournalEntry[]
  filmLists       FilmList[]
  followers       Follows[]       @relation("following")
  following       Follows[]       @relation("follower")
  comments        Comment[]
  reviewLikes     ReviewLike[]
  likedLists      LikedList[]
  watchlistItems  WatchlistItem[]
  favoriteFilms   FavoriteFilm[]
  likes           LikedFilm[]
}

model Film {
  id             Int             @id
  title          String
  overview       String?         @db.Text
  poster_path    String?
  release_date   DateTime?
  vote_average   Float?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  journalEntries JournalEntry[]
  lists          FilmsOnList[]
  watchlistItems WatchlistItem[]
  favoritedBy    FavoriteFilm[]
  likedBy        LikedFilm[]
}

model JournalEntry {
  id          String       @id @default(cuid())
  userId      String
  filmId      Int
  rating      Float
  review      String?      @db.Text
  logged_date DateTime
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  film        Film         @relation(fields: [filmId], references: [id], onDelete: Cascade)
  comments    Comment[]
  reviewLikes ReviewLike[]

  @@index([userId])
  @@index([filmId])
}

model FavoriteFilm {
  userId    String
  filmId    Int
  addedAt   DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  film      Film     @relation(fields: [filmId], references: [id], onDelete: Cascade)

  @@id([userId, filmId])
}

model WatchlistItem {
  userId  String
  filmId  Int
  addedAt DateTime @default(now())
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  film    Film     @relation(fields: [filmId], references: [id], onDelete: Cascade)

  @@id([userId, filmId])
}

model FilmList {
  id          String        @id @default(cuid())
  name        String
  description String?       @db.Text
  userId      String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  films       FilmsOnList[]
  likedBy     LikedList[]

  @@index([userId])
}

model FilmsOnList {
  listId  String
  filmId  Int
  addedAt DateTime @default(now())
  list    FilmList @relation(fields: [listId], references: [id], onDelete: Cascade)
  film    Film     @relation(fields: [filmId], references: [id], onDelete: Cascade)

  @@id([listId, filmId])
}

model Follows {
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId])
}

model Comment {
  id             String       @id @default(cuid())
  content        String
  userId         String
  journalEntryId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  journalEntry   JournalEntry @relation(fields: [journalEntryId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([journalEntryId])
}

model ReviewLike {
  userId         String
  journalEntryId String
  createdAt      DateTime     @default(now())
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  journalEntry   JournalEntry @relation(fields: [journalEntryId], references: [id], onDelete: Cascade)

  @@id([userId, journalEntryId])
}

model LikedFilm {
  userId    String
  filmId    Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  film      Film     @relation(fields: [filmId], references: [id], onDelete: Cascade)

  @@id([userId, filmId])
}

model LikedList {
  userId    String
  listId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  list      FilmList @relation(fields: [listId], references: [id], onDelete: Cascade)

  @@id([userId, listId])
}
