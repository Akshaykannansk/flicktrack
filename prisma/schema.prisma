
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String         @id @unique
  email           String         @unique
  name            String?
  username        String?        @unique
  imageUrl        String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  journalEntries  JournalEntry[]
  lists           FilmList[]
  watchlistItems  WatchlistItem[]
  favoriteFilms   Film[]         @relation("FavoriteFilms")
  likes           LikedFilm[]
  likedLists      LikedList[]
  reviewLikes     ReviewLike[]
  comments        Comment[]
  
  followers       Follows[]      @relation("Following")
  following       Follows[]      @relation("Follower")
}

model Follows {
    follower    User     @relation("Follower", fields: [followerId], references: [id])
    followerId  String
    following   User     @relation("Following", fields: [followingId], references: [id])
    followingId String
    createdAt   DateTime @default(now())

    @@id([followerId, followingId])
}

model Film {
  id            Int             @id
  title         String
  overview      String?         @db.Text
  posterPath    String?
  releaseDate   DateTime?
  voteAverage   Float?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  journalEntries JournalEntry[]
  watchlistItems WatchlistItem[]
  favoritedBy   User[]          @relation("FavoriteFilms")
  lists         FilmOnList[]
  likedBy       LikedFilm[]
}

model JournalEntry {
  id          String        @id @default(cuid())
  user        User          @relation(fields: [userId], references: [id])
  userId      String
  film        Film          @relation(fields: [filmId], references: [id])
  filmId      Int
  rating      Float
  review      String?       @db.Text
  loggedDate  DateTime
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  likedBy     ReviewLike[]
  comments    Comment[]

  @@unique([userId, filmId, loggedDate])
}

model WatchlistItem {
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  film        Film     @relation(fields: [filmId], references: [id])
  filmId      Int
  addedAt     DateTime @default(now())

  @@id([userId, filmId])
}

model FilmList {
    id          String       @id @default(cuid())
    name        String
    description String?      @db.Text
    user        User         @relation(fields: [userId], references: [id])
    userId      String
    films       FilmOnList[]
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    likedBy     LikedList[]
}

model FilmOnList {
    list      FilmList @relation(fields: [listId], references: [id], onDelete: Cascade)
    listId    String
    film      Film     @relation(fields: [filmId], references: [id])
    filmId    Int
    addedAt   DateTime @default(now())

    @@id([listId, filmId])
}

model LikedFilm {
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  film        Film     @relation(fields: [filmId], references: [id])
  filmId      Int
  createdAt   DateTime @default(now())

  @@id([userId, filmId])
}

model LikedList {
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    list      FilmList @relation(fields: [listId], references: [id], onDelete: Cascade)
    listId    String
    createdAt DateTime @default(now())

    @@id([userId, listId])
}

model ReviewLike {
    user           User          @relation(fields: [userId], references: [id])
    userId         String
    journalEntry   JournalEntry  @relation(fields: [journalEntryId], references: [id], onDelete: Cascade)
    journalEntryId String
    createdAt      DateTime      @default(now())

    @@id([userId, journalEntryId])
}

model Comment {
  id              String          @id @default(cuid())
  content         String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  user            User            @relation(fields: [userId], references: [id])
  userId          String
  journalEntry    JournalEntry    @relation(fields: [journalEntryId], references: [id], onDelete: Cascade)
  journalEntryId  String
}
