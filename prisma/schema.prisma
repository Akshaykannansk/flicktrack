// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id
  email          String         @unique
  name           String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  journalEntries JournalEntry[]
  watchlistItems WatchlistItem[]
  lists          FilmList[]
  favoriteFilms  Film[]         @relation("UserFavoriteFilms")

  following Follows[] @relation("following")
  followers Follows[] @relation("followers")
}

model Follows {
  followerId  String
  followingId String
  follower    User   @relation("following", fields: [followerId], references: [id], onDelete: Cascade)
  following   User   @relation("followers", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId])
}

model Film {
  id            Int             @id
  title         String
  overview      String?         @db.Text
  posterPath    String?
  releaseDate   DateTime?
  voteAverage   Float?
  journalEntries JournalEntry[]
  watchlistItems WatchlistItem[]
  lists         FilmOnList[]
  favoritedBy   User[]          @relation("UserFavoriteFilms")
}

model JournalEntry {
  id         String   @id @default(cuid())
  rating     Float
  review     String?  @db.Text
  loggedDate DateTime
  createdAt  DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  film   Film   @relation(fields: [filmId], references: [id], onDelete: Cascade)
  filmId Int

  @@unique([userId, filmId, loggedDate])
}

model WatchlistItem {
  userId  String
  filmId  Int
  addedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  film Film @relation(fields: [filmId], references: [id], onDelete: Cascade)

  @@id([userId, filmId])
}

model FilmList {
  id          String       @id @default(cuid())
  name        String
  description String?      @db.Text
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  films  FilmOnList[]
}

model FilmOnList {
  listId  String
  filmId  Int
  addedAt DateTime @default(now())

  list FilmList @relation(fields: [listId], references: [id], onDelete: Cascade)
  film Film     @relation(fields: [filmId], references: [id], onDelete: Cascade)

  @@id([listId, filmId])
}
