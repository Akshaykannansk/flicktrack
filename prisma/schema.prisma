// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Film {
  id            Int      @id @unique
  title         String
  overview      String?  @db.Text
  posterPath    String?
  releaseDate   DateTime?
  voteAverage   Float?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  journalEntries JournalEntry[]
  watchlistItems WatchlistItem[]
  lists          FilmOnList[]
  favoritedBy    User[]         @relation("FavoriteFilms")
  likedBy        LikedFilm[]
}

model User {
  id            String    @id @unique
  email         String    @unique
  name          String?
  username      String?
  imageUrl      String?
  
  journalEntries JournalEntry[]
  watchlistItems WatchlistItem[]
  filmLists      FilmList[]
  followers      Follows[]      @relation("Following")
  following      Follows[]      @relation("Followers")
  favoriteFilms  Film[]         @relation("FavoriteFilms")
  likes          LikedFilm[]
}

model JournalEntry {
  id          String   @id @default(cuid())
  userId      String
  filmId      Int
  rating      Float
  review      String?  @db.Text
  loggedDate  DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  film Film @relation(fields: [filmId], references: [id], onDelete: Cascade)

  @@unique([userId, filmId, loggedDate])
  @@index([userId])
  @@index([filmId])
}

model WatchlistItem {
  userId  String
  filmId  Int
  addedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  film Film @relation(fields: [filmId], references: [id], onDelete: Cascade)

  @@id([userId, filmId])
  @@index([filmId])
}

model FilmList {
  id          String   @id @default(cuid())
  name        String
  description String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user  User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  films FilmOnList[]

  @@index([userId])
}

model FilmOnList {
  listId  String
  filmId  Int
  addedAt DateTime @default(now())

  list FilmList @relation(fields: [listId], references: [id], onDelete: Cascade)
  film Film     @relation(fields: [filmId], references: [id], onDelete: Cascade)

  @@id([listId, filmId])
  @@index([filmId])
}

model Follows {
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower  User @relation("Followers", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId])
  @@index([followingId])
}

model LikedFilm {
  userId    String
  filmId    Int
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  film Film @relation(fields: [filmId], references: [id], onDelete: Cascade)

  @@id([userId, filmId])
  @@index([filmId])
}
