generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id
  email         String         @unique
  name          String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  journalEntries JournalEntry[]
  watchlistItems WatchlistItem[]
  lists         FilmList[]
}

model Film {
  id           Int            @id
  title        String
  overview     String?        @db.Text
  posterPath   String?
  releaseDate  DateTime?
  voteAverage  Float?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  journalEntries JournalEntry[]
  watchlistedBy WatchlistItem[]
  lists         FilmOnList[]

  @@index([title])
}

model JournalEntry {
  id         String   @id @default(cuid())
  userId     String
  filmId     Int
  rating     Float
  review     String?  @db.Text
  loggedDate DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  film Film @relation(fields: [filmId], references: [id], onDelete: Cascade)

  @@unique([userId, filmId, loggedDate])
  @@index([userId])
  @@index([filmId])
}

model WatchlistItem {
  userId    String
  filmId    Int
  addedAt   DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  film Film @relation(fields: [filmId], references: [id], onDelete: Cascade)

  @@id([userId, filmId])
  @@index([userId])
  @@index([filmId])
}

model FilmList {
  id          String       @id @default(cuid())
  name        String
  description String?      @db.Text
  userId      String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  isPublic    Boolean      @default(false)

  user  User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  films FilmOnList[]

  @@index([userId])
}

model FilmOnList {
  listId  String
  filmId  Int
  addedAt DateTime @default(now())

  list FilmList @relation(fields: [listId], references: [id], onDelete: Cascade)
  film Film     @relation(fields: [filmId], references: [id], onDelete: Cascade)

  @@id([listId, filmId])
  @@index([listId])
  @@index([filmId])
}
