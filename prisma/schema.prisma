
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextIndex"]
}

model AppSettings {
  key     String @id
  value   Json?
}

model User {
  id              String         @id @default(cuid())
  name            String?
  email           String?        @unique
  username        String?        @unique
  password        String?
  imageUrl        String?
  bio             String?        @db.Text
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  isAdmin         Boolean        @default(false)
  journalEntries  JournalEntry[]
  lists           FilmList[]
  likedFilms      LikedFilm[]
  likedLists      LikedList[]
  reviewLikes     ReviewLike[]
  comments        Comment[]
  favoriteFilms   FavoriteFilm[]
  watchlist       WatchlistItem[]
  filmsOnList     FilmsOnList[] // Added missing relation

  // For following system
  followers       Follows[]      @relation("Following")
  following       Follows[]      @relation("Follower")
    socialLinks     Json?
}

model Follows {
  follower    User     @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   User     @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String
  createdAt   DateTime @default(now())

  @@id([followerId, followingId])
}

model Film {
  id              Int              @id
  title           String
  overview        String?          @db.Text
  poster_path     String?
  release_date    DateTime?
  vote_average    Float?
  journalEntries  JournalEntry[]
  likedBy         LikedFilm[]
  onWatchlists    WatchlistItem[]
  onLists         FilmsOnList[]
  favoritedBy     FavoriteFilm[]
}

model JournalEntry {
  id          String       @id @default(cuid())
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  film        Film         @relation(fields: [filmId], references: [id], onDelete: Cascade)
  filmId      Int
  rating      Float
  review      String?      @db.Text
  logged_date DateTime
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  reviewLikes ReviewLike[]
  comments    Comment[]

  @@index([userId])
  @@index([filmId])
}

model LikedFilm {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  film      Film     @relation(fields: [filmId], references: [id], onDelete: Cascade)
  filmId    Int
  createdAt DateTime @default(now())

  @@id([userId, filmId])
}

model WatchlistItem {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  film      Film     @relation(fields: [filmId], references: [id], onDelete: Cascade)
  filmId    Int
  addedAt   DateTime @default(now())

  @@id([userId, filmId])
}

model FilmList {
  id          String        @id @default(cuid())
  name        String
  description String?       @db.Text
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  films       FilmsOnList[]
  likedBy     LikedList[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

}

model FilmsOnList {
  list      FilmList @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId    String
  film      Film     @relation(fields: [filmId], references: [id], onDelete: Cascade)
  filmId    Int
  addedAt   DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade) // Relation to User
  userId    String   // Foreign key for User

  @@id([listId, filmId])
}

model LikedList {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  list      FilmList @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId    String
  createdAt DateTime @default(now())

  @@id([userId, listId])
}

model ReviewLike {
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  journalEntry   JournalEntry @relation(fields: [journalEntryId], references: [id], onDelete: Cascade)
  journalEntryId String
  createdAt      DateTime     @default(now())

  @@id([userId, journalEntryId])
  @@index([journalEntryId])
}

model Comment {
  id             String       @id @default(cuid())
  content        String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  journalEntry   JournalEntry @relation(fields: [journalEntryId], references: [id], onDelete: Cascade)
  journalEntryId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model FavoriteFilm {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  film      Film     @relation(fields: [filmId], references: [id], onDelete: Cascade)
  filmId    Int
  createdAt DateTime @default(now())
  addedAt DateTime @default(now())

  @@id([userId, filmId])
}
