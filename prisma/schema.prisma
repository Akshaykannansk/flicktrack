
datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String           @id
  email           String           @unique
  name            String?
  username        String?
  imageUrl        String?
  bio             String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  journalEntries  JournalEntry[]
  lists           FilmList[]
  watchlistItems  WatchlistItem[]
  favoriteFilms   FavoriteFilm[]
  likes           LikedFilm[]
  likedLists      LikedList[]
  reviewLikes     ReviewLike[]
  comments        Comment[]
  followers       Follows[]        @relation("Following")
  following       Follows[]        @relation("Followers")
}

model Film {
  id             Int              @id
  title          String
  overview       String?
  poster_path    String?
  release_date   DateTime?
  vote_average   Float?
  journalEntries JournalEntry[]
  lists          FilmsOnList[]
  watchlistItems WatchlistItem[]
  favoritedBy    FavoriteFilm[]
  likedBy        LikedFilm[]
}

model JournalEntry {
  id             String        @id @default(cuid())
  userId         String
  filmId         Int
  rating         Float
  review         String?
  logged_date    DateTime
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  film           Film          @relation(fields: [filmId], references: [id])
  reviewLikes    ReviewLike[]
  comments       Comment[]

  @@index([userId])
  @@index([filmId])
}

model FilmList {
  id          String        @id @default(cuid())
  name        String
  description String?
  userId      String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  films       FilmsOnList[]
  likedBy     LikedList[]

  @@index([userId])
}

model FilmsOnList {
  listId   String
  filmId   Int
  addedAt  DateTime @default(now())
  list     FilmList @relation(fields: [listId], references: [id], onDelete: Cascade)
  film     Film     @relation(fields: [filmId], references: [id])

  @@id([listId, filmId])
  @@index([listId])
  @@index([filmId])
}

model WatchlistItem {
  userId   String
  filmId   Int
  addedAt  DateTime @default(now())
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  film     Film     @relation(fields: [filmId], references: [id])

  @@id([userId, filmId])
  @@index([userId])
  @@index([filmId])
}

model FavoriteFilm {
  userId  String
  filmId  Int
  addedAt DateTime @default(now())
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  film    Film     @relation(fields: [filmId], references: [id])

  @@id([userId, filmId])
  @@index([userId])
  @@index([filmId])
}

model LikedFilm {
  userId    String
  filmId    Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  film      Film     @relation(fields: [filmId], references: [id])

  @@id([userId, filmId])
  @@index([userId])
}

model LikedList {
  userId    String
  listId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  list      FilmList @relation(fields: [listId], references: [id], onDelete: Cascade)

  @@id([userId, listId])
  @@index([userId])
}

model ReviewLike {
  userId         String
  journalEntryId String
  createdAt      DateTime     @default(now())
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  journalEntry   JournalEntry @relation(fields: [journalEntryId], references: [id], onDelete: Cascade)

  @@id([userId, journalEntryId])
  @@index([userId])
}

model Comment {
  id             String       @id @default(cuid())
  content        String
  userId         String
  journalEntryId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  journalEntry   JournalEntry @relation(fields: [journalEntryId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([journalEntryId])
}

model Follows {
  followerId  String
  followingId String
  follower    User   @relation("Followers", fields: [followerId], references: [id], onDelete: Cascade)
  following   User   @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}
