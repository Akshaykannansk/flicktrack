// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  email         String    @unique
  name          String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  journalEntries JournalEntry[]
  watchlistItems WatchlistItem[]
  filmLists     FilmList[]
}

model Film {
  id            Int      @id @unique
  title         String
  overview      String?  @db.Text
  posterPath    String?
  releaseDate   String?
  voteAverage   Float?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  journalEntries JournalEntry[]
  watchlistItems WatchlistItem[]
  lists         FilmOnList[]
}

model JournalEntry {
  id         String   @id @default(cuid())
  rating     Float
  review     String?  @db.Text
  loggedDate DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  film       Film     @relation(fields: [filmId], references: [id], onDelete: Cascade)
  filmId     Int

  @@unique([userId, filmId, loggedDate])
}

model WatchlistItem {
  userId    String
  filmId    Int
  addedAt   DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  film      Film     @relation(fields: [filmId], references: [id], onDelete: Cascade)

  @@id([userId, filmId])
}

model FilmList {
  id          String       @id @default(cuid())
  name        String
  description String?
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  films       FilmOnList[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model FilmOnList {
  listId   String
  filmId   Int
  list     FilmList @relation(fields: [listId], references: [id], onDelete: Cascade)
  film     Film     @relation(fields: [filmId], references: [id], onDelete: Cascade)
  addedAt  DateTime @default(now())

  @@id([listId, filmId])
}
