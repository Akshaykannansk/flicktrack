// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @id @default(uuid())
  email            String          @unique
  name             String?
  username         String?         @unique
  imageUrl         String?
  bio              String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  journalEntries   JournalEntry[]
  lists            FilmList[]
  watchlistItems   WatchlistItem[]
  favoriteFilms    FavoriteFilm[]
  likes            LikedFilm[]
  likedLists       LikedList[]
  reviewLikes      ReviewLike[]
  comments         Comment[]
  followers        Follows[]       @relation("UserFollowers")
  following        Follows[]       @relation("UserFollowing")
}

model Film {
  id             Int             @id
  title          String
  overview       String?         @db.Text
  poster_path    String?
  release_date   DateTime?       @db.Date
  vote_average   Float?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  journalEntries JournalEntry[]
  lists          FilmsOnList[]
  watchlistedBy  WatchlistItem[]
  favoritedBy    FavoriteFilm[]
  likedBy        LikedFilm[]
}

model JournalEntry {
  id          String       @id @default(cuid())
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  film        Film         @relation(fields: [filmId], references: [id], onDelete: Cascade)
  filmId      Int
  rating      Float
  review      String?      @db.Text
  logged_date DateTime
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  reviewLikes ReviewLike[]
  comments    Comment[]

  @@unique([userId, filmId, logged_date])
}

model FilmList {
  id          String        @id @default(cuid())
  name        String
  description String?
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  films       FilmsOnList[]
  likedBy     LikedList[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model FilmsOnList {
  list     FilmList @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId   String
  film     Film     @relation(fields: [filmId], references: [id], onDelete: Cascade)
  filmId   Int
  addedAt  DateTime @default(now())

  @@id([listId, filmId])
}

model WatchlistItem {
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  film     Film     @relation(fields: [filmId], references: [id], onDelete: Cascade)
  filmId   Int
  addedAt  DateTime @default(now())

  @@id([userId, filmId])
}

model FavoriteFilm {
    user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId   String
    film     Film     @relation(fields: [filmId], references: [id], onDelete: Cascade)
    filmId   Int
    addedAt  DateTime @default(now())

    @@id([userId, filmId])
}

model LikedFilm {
    user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId   String
    film     Film     @relation(fields: [filmId], references: [id], onDelete: Cascade)
    filmId   Int
    createdAt DateTime @default(now())

    @@id([userId, filmId])
}

model LikedList {
    user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId   String
    list     FilmList @relation(fields: [listId], references: [id], onDelete: Cascade)
    listId   String
    createdAt DateTime @default(now())

    @@id([userId, listId])
}

model ReviewLike {
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  journalEntry   JournalEntry @relation(fields: [journalEntryId], references: [id], onDelete: Cascade)
  journalEntryId String
  createdAt      DateTime     @default(now())

  @@id([userId, journalEntryId])
}

model Comment {
  id             String       @id @default(cuid())
  content        String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  journalEntry   JournalEntry @relation(fields: [journalEntryId], references: [id], onDelete: Cascade)
  journalEntryId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Follows {
    follower    User     @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
    followerId  String
    following   User     @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)
    followingId String
    createdAt   DateTime @default(now())

    @@id([followerId, followingId])
}
