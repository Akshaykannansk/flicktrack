// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String         @id @unique
  email           String         @unique
  name            String?
  username        String?        @unique
  imageUrl        String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  journalEntries  JournalEntry[]
  watchlistItems  WatchlistItem[]
  filmLists       FilmList[]
  likedFilms      LikedFilm[]
  likedLists      LikedList[]
  reviewLikes     ReviewLike[]

  followers Follows[] @relation("following")
  following Follows[] @relation("follower")

  favoriteFilms Film[] @relation("FavoriteFilms")
}

model Film {
  id          Int      @id
  title       String
  overview    String?  @db.Text
  posterPath  String?
  releaseDate DateTime?
  voteAverage Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  journalEntries JournalEntry[]
  watchilstItems WatchlistItem[]
  lists          FilmOnList[]
  likedBy        LikedFilm[]

  favoritedBy User[] @relation("FavoriteFilms")
}

model JournalEntry {
  id         String   @id @default(cuid())
  userId     String
  filmId     Int
  loggedDate DateTime
  rating     Float
  review     String?  @db.Text
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  film Film @relation(fields: [filmId], references: [id], onDelete: Cascade)

  likedBy ReviewLike[]

  @@unique([userId, filmId, loggedDate])
}

model ReviewLike {
  userId         String
  journalEntryId String
  createdAt      DateTime @default(now())

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  journalEntry JournalEntry @relation(fields: [journalEntryId], references: [id], onDelete: Cascade)

  @@id([userId, journalEntryId])
}


model WatchlistItem {
  userId  String
  filmId  Int
  addedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  film Film @relation(fields: [filmId], references: [id], onDelete: Cascade)

  @@id([userId, filmId])
}

model FilmList {
  id          String   @id @default(cuid())
  name        String
  description String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user  User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  films FilmOnList[]

  likedBy LikedList[]
}

model FilmOnList {
  listId  String
  filmId  Int
  addedAt DateTime @default(now())

  list FilmList @relation(fields: [listId], references: [id], onDelete: Cascade)
  film Film     @relation(fields: [filmId], references: [id], onDelete: Cascade)

  @@id([listId, filmId])
}

model LikedFilm {
  userId    String
  filmId    Int
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  film Film @relation(fields: [filmId], references: [id], onDelete: Cascade)

  @@id([userId, filmId])
}

model LikedList {
  userId    String
  listId    String
  createdAt DateTime @default(now())

  user User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  list FilmList @relation(fields: [listId], references: [id], onDelete: Cascade)

  @@id([userId, listId])
}

model Follows {
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower  User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId])
}