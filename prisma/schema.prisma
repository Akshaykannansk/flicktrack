
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @unique
  email           String   @unique
  name            String?
  username        String?  @unique
  imageUrl        String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  journalEntries  JournalEntry[]
  likes           LikedFilm[]
  watchlistItems  WatchlistItem[]
  lists           FilmList[]
  favoriteFilms   Film[]     @relation("FavoriteFilms")
  followers       Follows[]  @relation("Following")
  following       Follows[]  @relation("Followers")
}

model Film {
  id            Int      @id
  title         String
  overview      String?  @db.Text
  posterPath    String?
  releaseDate   DateTime? @db.Date
  voteAverage   Float?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  journalEntries JournalEntry[]
  likes         LikedFilm[]
  watchlistItems WatchlistItem[]
  lists         FilmOnList[]
  favoritedBy   User[]     @relation("FavoriteFilms")
}

model JournalEntry {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  film       Film     @relation(fields: [filmId], references: [id], onDelete: Cascade)
  filmId     Int
  rating     Float
  review     String?  @db.Text
  loggedDate DateTime @db.Date
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, filmId, loggedDate])
}

model LikedFilm {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  film      Film     @relation(fields: [filmId], references: [id], onDelete: Cascade)
  filmId    Int
  createdAt DateTime @default(now())

  @@id([userId, filmId])
}

model WatchlistItem {
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  film    Film     @relation(fields: [filmId], references: [id], onDelete: Cascade)
  filmId  Int
  addedAt DateTime @default(now())

  @@id([userId, filmId])
}

model FilmList {
  id          String    @id @default(cuid())
  name        String
  description String?
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  films       FilmOnList[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model FilmOnList {
  list      FilmList @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId    String
  film      Film     @relation(fields: [filmId], references: [id], onDelete: Cascade)
  filmId    Int
  addedAt   DateTime @default(now())

  @@id([listId, filmId])
}


model Follows {
  follower    User     @relation("Followers", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   User     @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String
  createdAt   DateTime @default(now())

  @@id([followerId, followingId])
}
